source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/Apex_Data_Extract.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/Apex_Data_Extract.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/Apex_Data_Extract.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/Apex_Data_Extract.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/Apex_Data_Extract.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/TotalAlkCalc_wParsing.R')
Mass[Mass$Sample.ID==name,4]
Mass[Mass$Sample.ID==name,2]
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/TotalAlkCalc_wParsing.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/TotalAlkCalc_wParsing.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/TotalAlkCalc_wParsing.R')
name
sample_names[i]
Mass$Sample.ID
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/TotalAlkCalc_wParsing.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/TotalAlkCalc_wParsing.R')
View(TA)
Mass[Mass$Sample.ID==name,3]
#Calculate total alkalinity using potentiometric titrations
#Uses a for loop to read in data exported as a titration file and calculate Total alkalinity
#At the end it exports your data as a .csv file. Comment the last line out if your don't want that.
### Files needed ######
# 1. pHCalibration.csv in your "Data" folder
#Inside the Data folder You must have a subfolder for each data set. In each subfolder there is:
#2. the mass file for your run
#3. a subfolder named "TodaysDate" (where all of your titration files are) directly exported from LabX.
#
#Created by Nyssa Silbiger 03/28/2014
#modified 20180529 Hollie Putnam
#------------------------------------------------------------
rm(list=ls())
#set working directory---------------------------------------------------------------------------------------------
setwd("/Users/hputnam/MyProjects/BioMin_HIS/RAnalysis/")
main<-getwd()
#load libraries----------------------------------------------
library(seacarb) #used to calculate TA
library(tidyverse)
#CHANGE THESE VALUES EVERY DAY----------------------------------------------
path<-"Data/20180608" #the location of all your titration files
massfile<-"20180608mass_Run2.csv" # name of your file with masses
titrationfile<-'20180608_Run2.csv'# name of the last titration file run
# Date that the data were run
date<-'20180608'
#DO NOT CHANGE ANYTHING BELOW THIS LINE UNLESS A NEW BOTTLE OF ACID IS USED
#load Data---------------------------------------------------
#load Mass Data
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
#### pH Calibration #####
pHCal<-read.csv('Data/pHCalibration.csv') # read in the pH Calibration file
#select the calibration for the correct date
pHData<-pHCal[pHCal$Date==date,]
# calculate pH 3 and 3.5 based on the slope and intercept from pH 4, 7, and 10 calibration
mod.pH<-lm(c(pHData$pH4, pHData$pH7, pHData$pH10)~c(4,7,10)) # linear model
# print a plot of the relationship between pH and mV
#png(paste0(path,"/",Sys.Date(),'pHmvplot.png'), height = 400, width = 400)
plot(c(4,7,10), c(pHData$pH4, pHData$pH7, pHData$pH10), xlab = 'pH', ylab = 'mv')
lines(c(4,7,10), predict(mod.pH))
R2<-summary(mod.pH)$r.squared
legend('topright', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
#dev.off()
# Select the mV for pH=3 and pH=3.5 based on your probe calibration
pH35<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3.5
pH3<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3
##### titration###########
#create an empty matrix to put the TA values in
nrows<-nrow(Mass) # number of rows in a mass file
TA <- data.frame(matrix(nrow = nrows, ncol = 5))
rownames(TA)<-Mass$Sample.ID1[1:nrows]
colnames(TA)<-c("Sample.ID",'TA','Mass', "Tank", "Type")
#run a for loop to bring in the titration files one at a time and calculate TA
# read in the mega concatenated titration results file
filename<-file.path(path,titrationfile)
AllData<-read.csv(filename, sep=",", na.string="NA",as.is=T, skip=8)[ ,1:5]
AllData <- AllData[-1,]
# Identifies rows starting with zero seconds "0" in column 1
sample_name_positions <- c(1,grep("^0", AllData[,1]), nrow(AllData))
sample_name_positions <- sample_name_positions[-1] #remove first report of duplicated 1
## parse through all the data in the one file ###
sample_names<-Mass$sample
# create a list with all the sample IDs
sample_names_list <- list()
for (item in 1:length(sample_names)){
sample_names_list[[item]] <- sample_names[item]
}
# fill the list with the data from each sample
for (i in 1:nrows){
sample_names_list[[i]]<-data.frame(AllData[sample_name_positions[i]:sample_name_positions[i+1],])
colnames(sample_names_list[[i]])<-c("Time","Volume","mV", "dV/dt",	"Temperature")
}
i=1
#  Data<-read.csv(file.names[i], header=F, sep=",", na.string="NA",as.is=T, skip=10)[ ,1:5]
# colnames(Data) <-  c("Volume","Time",	"mV",	"Temperature",	"dV/dt")
Data<-sample_names_list[[i]]
Data
# everything was brought in as a character because of the second line, converts back to numeric
Data$mV<-suppressWarnings(as.numeric(Data$mV)) ## supress the warnings since NA will be produced through coercion
Data$Temperature<-suppressWarnings(as.numeric(Data$Temperature)) ## supress the warnings since NA will be produced through coercion
Data$Volume<-suppressWarnings(as.numeric(Data$Volume)) ## supress the warnings since NA will be produced through coercion
#name of the file without .csv
#name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
name<-sample_names[i]
name
#calculates the index of values between pH 2 and 3.5
mV<-which(Data$mV<pH3 & Data$mV>pH35)
d<-(-0.00000335*mean(Data$Temperature[mV], na.rm=T)^2-0.0001356*mean(Data$Temperature[mV], na.rm=T)+1.02613) #bottle changed 20180528
#concentration of your titrant: CHANGE EVERYTIME ACID IS CHANGED
c<-0.099793 #20180529 batch A3
#Salinity of your samples
s<-Mass[Mass$Sample.ID==name,3]
#s<-Mass[name,2]
#mass of sample in g: changed with every sample
#mass<-Mass[name,1]
mass<-Mass[Mass$Sample.ID==name,2]
sample.id<-Mass[Mass$Sample.ID==name,1]
sample.type<-Mass[Mass$Sample.ID==name,5]
s
Mass[Mass$Sample.ID==name,3]
#Calculate total alkalinity using potentiometric titrations
#Uses a for loop to read in data exported as a titration file and calculate Total alkalinity
#At the end it exports your data as a .csv file. Comment the last line out if your don't want that.
### Files needed ######
# 1. pHCalibration.csv in your "Data" folder
#Inside the Data folder You must have a subfolder for each data set. In each subfolder there is:
#2. the mass file for your run
#3. a subfolder named "TodaysDate" (where all of your titration files are) directly exported from LabX.
#
#Created by Nyssa Silbiger 03/28/2014
#modified 20180529 Hollie Putnam
#------------------------------------------------------------
rm(list=ls())
#set working directory---------------------------------------------------------------------------------------------
setwd("/Users/hputnam/MyProjects/BioMin_HIS/RAnalysis/")
main<-getwd()
#load libraries----------------------------------------------
library(seacarb) #used to calculate TA
library(tidyverse)
#CHANGE THESE VALUES EVERY DAY----------------------------------------------
path<-"Data/20180608" #the location of all your titration files
massfile<-"20180608mass_Run2.csv" # name of your file with masses
titrationfile<-'20180608_Run2.csv'# name of the last titration file run
# Date that the data were run
date<-'20180608'
#DO NOT CHANGE ANYTHING BELOW THIS LINE UNLESS A NEW BOTTLE OF ACID IS USED
#load Data---------------------------------------------------
#load Mass Data
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
#### pH Calibration #####
pHCal<-read.csv('Data/pHCalibration.csv') # read in the pH Calibration file
#select the calibration for the correct date
pHData<-pHCal[pHCal$Date==date,]
# calculate pH 3 and 3.5 based on the slope and intercept from pH 4, 7, and 10 calibration
mod.pH<-lm(c(pHData$pH4, pHData$pH7, pHData$pH10)~c(4,7,10)) # linear model
# print a plot of the relationship between pH and mV
#png(paste0(path,"/",Sys.Date(),'pHmvplot.png'), height = 400, width = 400)
plot(c(4,7,10), c(pHData$pH4, pHData$pH7, pHData$pH10), xlab = 'pH', ylab = 'mv')
lines(c(4,7,10), predict(mod.pH))
R2<-summary(mod.pH)$r.squared
legend('topright', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
#dev.off()
# Select the mV for pH=3 and pH=3.5 based on your probe calibration
pH35<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3.5
pH3<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3
##### titration###########
#create an empty matrix to put the TA values in
nrows<-nrow(Mass) # number of rows in a mass file
TA <- data.frame(matrix(nrow = nrows, ncol = 5))
rownames(TA)<-Mass$Sample.ID1[1:nrows]
colnames(TA)<-c("Sample.ID",'TA','Mass', "Tank", "Type")
#run a for loop to bring in the titration files one at a time and calculate TA
# read in the mega concatenated titration results file
filename<-file.path(path,titrationfile)
AllData<-read.csv(filename, sep=",", na.string="NA",as.is=T, skip=8)[ ,1:5]
AllData <- AllData[-1,]
# Identifies rows starting with zero seconds "0" in column 1
sample_name_positions <- c(1,grep("^0", AllData[,1]), nrow(AllData))
sample_name_positions <- sample_name_positions[-1] #remove first report of duplicated 1
## parse through all the data in the one file ###
sample_names<-Mass$sample
# create a list with all the sample IDs
sample_names_list <- list()
for (item in 1:length(sample_names)){
sample_names_list[[item]] <- sample_names[item]
}
# fill the list with the data from each sample
for (i in 1:nrows){
sample_names_list[[i]]<-data.frame(AllData[sample_name_positions[i]:sample_name_positions[i+1],])
colnames(sample_names_list[[i]])<-c("Time","Volume","mV", "dV/dt",	"Temperature")
}
i=1
#  Data<-read.csv(file.names[i], header=F, sep=",", na.string="NA",as.is=T, skip=10)[ ,1:5]
# colnames(Data) <-  c("Volume","Time",	"mV",	"Temperature",	"dV/dt")
Data<-sample_names_list[[i]]
# everything was brought in as a character because of the second line, converts back to numeric
Data$mV<-suppressWarnings(as.numeric(Data$mV)) ## supress the warnings since NA will be produced through coercion
Data$Temperature<-suppressWarnings(as.numeric(Data$Temperature)) ## supress the warnings since NA will be produced through coercion
Data$Volume<-suppressWarnings(as.numeric(Data$Volume)) ## supress the warnings since NA will be produced through coercion
#name of the file without .csv
#name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
name<-sample_names[i]
#calculates the index of values between pH 2 and 3.5
mV<-which(Data$mV<pH3 & Data$mV>pH35)
d<-(-0.00000335*mean(Data$Temperature[mV], na.rm=T)^2-0.0001356*mean(Data$Temperature[mV], na.rm=T)+1.02613) #bottle changed 20180528
#concentration of your titrant: CHANGE EVERYTIME ACID IS CHANGED
c<-0.099793 #20180529 batch A3
#Salinity of your samples
s<-Mass[Mass$Sample.ID==name,3]
#s<-Mass[name,2]
#mass of sample in g: changed with every sample
#mass<-Mass[name,1]
mass<-Mass[Mass$Sample.ID==name,2]
sample.id<-Mass[Mass$Sample.ID==name,1]
sample.type<-Mass[Mass$Sample.ID==name,5]
s
Mass$sample
sample_names_list
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/TotalAlkCalc_wParsing.R')
#Created by Nyssa Silbiger 03/28/2014
#modified 20180529 Hollie Putnam
#------------------------------------------------------------
rm(list=ls())
#set working directory---------------------------------------------------------------------------------------------
setwd("/Users/hputnam/MyProjects/BioMin_HIS/RAnalysis/")
main<-getwd()
#load libraries----------------------------------------------
library(seacarb) #used to calculate TA
library(tidyverse)
#CHANGE THESE VALUES EVERY DAY----------------------------------------------
path<-"Data/20180608" #the location of all your titration files
massfile<-"20180608mass_Run2.csv" # name of your file with masses
titrationfile<-'20180608_Run2.csv'# name of the last titration file run
# Date that the data were run
date<-'20180608'
#DO NOT CHANGE ANYTHING BELOW THIS LINE UNLESS A NEW BOTTLE OF ACID IS USED
#load Data---------------------------------------------------
#load Mass Data
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
#### pH Calibration #####
pHCal<-read.csv('Data/pHCalibration.csv') # read in the pH Calibration file
#select the calibration for the correct date
pHData<-pHCal[pHCal$Date==date,]
# calculate pH 3 and 3.5 based on the slope and intercept from pH 4, 7, and 10 calibration
mod.pH<-lm(c(pHData$pH4, pHData$pH7, pHData$pH10)~c(4,7,10)) # linear model
# print a plot of the relationship between pH and mV
#png(paste0(path,"/",Sys.Date(),'pHmvplot.png'), height = 400, width = 400)
plot(c(4,7,10), c(pHData$pH4, pHData$pH7, pHData$pH10), xlab = 'pH', ylab = 'mv')
lines(c(4,7,10), predict(mod.pH))
R2<-summary(mod.pH)$r.squared
legend('topright', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
# Select the mV for pH=3 and pH=3.5 based on your probe calibration
pH35<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3.5
pH3<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3
##### titration###########
#create an empty matrix to put the TA values in
nrows<-nrow(Mass) # number of rows in a mass file
TA <- data.frame(matrix(nrow = nrows, ncol = 5))
rownames(TA)<-Mass$Sample.ID1[1:nrows]
colnames(TA)<-c("Sample.ID",'TA','Mass', "Tank", "Type")
filename<-file.path(path,titrationfile)
AllData<-read.csv(filename, sep=",", na.string="NA",as.is=T, skip=8)[ ,1:5]
AllData <- AllData[-1,]
# Identifies rows starting with zero seconds "0" in column 1
sample_name_positions <- c(1,grep("^0", AllData[,1]), nrow(AllData))
sample_name_positions <- sample_name_positions[-1] #remove first report of duplicated 1
sample_name_positions
Mass$Sample.ID
## parse through all the data in the one file ###
sample_names<-Mass$sample
# create a list with all the sample IDs
sample_names_list <- list()
for (item in 1:length(sample_names)){
sample_names_list[[item]] <- sample_names[item]
}
sample_names
# fill the list with the data from each sample
for (i in 1:nrows){
sample_names_list[[i]]<-data.frame(AllData[sample_name_positions[i]:sample_name_positions[i+1],])
colnames(sample_names_list[[i]])<-c("Time","Volume","mV", "dV/dt",	"Temperature")
}
i=1
#  Data<-read.csv(file.names[i], header=F, sep=",", na.string="NA",as.is=T, skip=10)[ ,1:5]
# colnames(Data) <-  c("Volume","Time",	"mV",	"Temperature",	"dV/dt")
Data<-sample_names_list[[i]]
View(Data)
sample_names_list[[i]]
# everything was brought in as a character because of the second line, converts back to numeric
Data$mV<-suppressWarnings(as.numeric(Data$mV)) ## supress the warnings since NA will be produced through coercion
Data$Temperature<-suppressWarnings(as.numeric(Data$Temperature)) ## supress the warnings since NA will be produced through coercion
Data$Volume<-suppressWarnings(as.numeric(Data$Volume)) ## supress the warnings since NA will be produced through coercion
sample_names[i]
name<-sample_names[i]
#calculates the index of values between pH 2 and 3.5
mV<-which(Data$mV<pH3 & Data$mV>pH35)
d<-(-0.00000335*mean(Data$Temperature[mV], na.rm=T)^2-0.0001356*mean(Data$Temperature[mV], na.rm=T)+1.02613) #bottle changed 20180528
#concentration of your titrant: CHANGE EVERYTIME ACID IS CHANGED
c<-0.099793 #20180529 batch A3
Mass[Mass$Sample.ID==name,3]
Mass[Mass$sample==name,3]
Mass[Mass$sample==name,2]
Mass[Mass$sample==name,1]
Mass[Mass$sample==name,5]
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/TotalAlkCalc_wParsing.R')
Mass[Mass$sample==name,4]
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/TotalAlkCalc_wParsing.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/TotalAlkCalc_wParsing.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/CarbChem.R')
View(SW.chem)
par(mfrow=c(3,2))
plot(carb.output$Treatment, carb.output$Temperature, xlab="Treatment", ylab="Temperature°C", ylim=c(23,28))
plot(carb.output$Treatment, carb.output$pH, xlab="Treatment", ylab="pH Total Scale", ylim=c(7.0,8.2))
plot(carb.output$Treatment, carb.output$pCO2, xlab="Treatment", ylab="pCO2 µmol kg-1", ylim=c(350,2600))
plot(carb.output$Treatment, carb.output$Salinity, xlab="Treatment", ylab="Salinity psu", ylim=c(30,35))
plot(carb.output$Treatment, carb.output$TA, xlab="Treatment", ylab="Total Alkalinity µmol kg-1", ylim=c(2100,2250))
plot(carb.output$Treatment, carb.output$Aragonite.Sat, xlab="Treatment", ylab="Aragonite Saturation State", ylim=c(0,4))
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/CarbChem.R')
plot(carb.output$Treatment, carb.output$pCO2, xlab="Treatment", ylab="pCO2 µmol kg-1", ylim=c(350,2800))
dev.off()
plot(carb.output$Treatment, carb.output$pCO2, xlab="Treatment", ylab="pCO2 µmol kg-1", ylim=c(350,2800))
